import streamlit as st
import pandas as pd
import plotly.graph_objects as go

# -----------------------------
# ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
# -----------------------------
st.set_page_config(page_title="–°–∏—Å—Ç–µ–º–∞ –æ—Ü—ñ–Ω–∫–∏ —Ä–∏–∑–∏–∫—É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤", layout="wide")
st.title("üìä –°–∏—Å—Ç–µ–º–∞ –æ—Ü—ñ–Ω–∫–∏ —Ä–∏–∑–∏–∫—É –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤")

# -----------------------------
# üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV –∞–±–æ –ø—Ä–∏–∫–ª–∞–¥
# -----------------------------
uploaded_file = st.file_uploader("‚¨ÜÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ CSV-—Ñ–∞–π–ª –∑ –¥–∞–Ω–∏–º–∏ –∫–æ–º–ø–∞–Ω—ñ–π", type=["csv"])

if uploaded_file is None:
    st.info("–ù–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ñ–∞–π–ª ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—Ä–∏–∫–ª–∞–¥.")
    data = {
        "company": ["A_Corp", "B_Ltd", "C_Group", "D_Holdings"],
        "financial_score": [0.8, 0.4, 0.3, 0.9],
        "tax_score": [0.6, 0.7, 0.2, 0.9],
        "public_reputation": [0.9, 0.5, 0.4, 0.8],
    }
    df = pd.DataFrame(data)
else:
    df = pd.read_csv(uploaded_file)

# -----------------------------
# üßÆ –û–±—á–∏—Å–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É —Ä–∏–∑–∏–∫—É
# -----------------------------
weights = {
    "financial_score": 0.5,
    "tax_score": 0.3,
    "public_reputation": 0.2
}

for col in weights.keys():
    df[col] = df[col].clip(0, 1)

df["risk_index"] = (
    df["financial_score"] * weights["financial_score"] +
    df["tax_score"] * weights["tax_score"] +
    df["public_reputation"] * weights["public_reputation"]
)

df["risk_level"] = 1 - df["risk_index"]

df["risk_category"] = pd.cut(
    df["risk_level"],
    bins=[0, 0.33, 0.66, 1],
    labels=["–ù–∏–∑—å–∫–∏–π", "–°–µ—Ä–µ–¥–Ω—ñ–π", "–í–∏—Å–æ–∫–∏–π"]
)

# -----------------------------
# üìã –¢–∞–±–ª–∏—Ü—è –∑ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è–º
# -----------------------------
st.subheader("üìã –û—Ü—ñ–Ω–∫–∞ —Ä–∏–∑–∏–∫—É –∫–æ–º–ø–∞–Ω—ñ–π")

def highlight_risk(row):
    if row["risk_category"] == "–í–∏—Å–æ–∫–∏–π":
        color = "background-color: #f8d7da;"  # —á–µ—Ä–≤–æ–Ω–∏–π
    elif row["risk_category"] == "–°–µ—Ä–µ–¥–Ω—ñ–π":
        color = "background-color: #fff3cd;"  # –∂–æ–≤—Ç–∏–π
    else:
        color = "background-color: #d4edda;"  # –∑–µ–ª–µ–Ω–∏–π
    return [color] * len(row)

st.dataframe(df.style.apply(highlight_risk, axis=1), use_container_width=True)

# -----------------------------
# üéØ –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è gauge-chart
# -----------------------------
st.subheader("üéØ –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä—ñ–≤–Ω—è —Ä–∏–∑–∏–∫—É")

company_choice = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–ø–∞–Ω—ñ—é:", df["company"])
selected = df[df["company"] == company_choice].iloc[0]
risk_value = selected["risk_level"]

fig = go.Figure(go.Indicator(
    mode="gauge+number",
    value=risk_value * 100,
    title={'text': f"–†—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É: {company_choice}"},
    gauge={
        'axis': {'range': [0, 100]},
        'bar': {'color': "darkred" if risk_value > 0.66 else "orange" if risk_value > 0.33 else "green"},
        'steps': [
            {'range': [0, 33], 'color': "lightgreen"},
            {'range': [33, 66], 'color': "yellow"},
            {'range': [66, 100], 'color': "salmon"}
        ],
    }
))

st.plotly_chart(fig, use_container_width=True)

# -----------------------------
# ‚ö†Ô∏è –í–∏—Å–æ–∫–æ—Ä–∏–∑–∏–∫–æ–≤—ñ –∫–æ–º–ø–∞–Ω—ñ—ó
# -----------------------------
high_risk = df[df["risk_category"] == "–í–∏—Å–æ–∫–∏–π"]

if not high_risk.empty:
    st.warning("‚ö†Ô∏è –ö–æ–º–ø–∞–Ω—ñ—ó –∑ –≤–∏—Å–æ–∫–∏–º —Ä—ñ–≤–Ω–µ–º —Ä–∏–∑–∏–∫—É:")
    st.write(", ".join(high_risk["company"]))
else:
    st.success("‚úÖ –£—Å—ñ –∫–æ–º–ø–∞–Ω—ñ—ó –º–∞—é—Ç—å –ø—Ä–∏–π–Ω—è—Ç–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É.")
